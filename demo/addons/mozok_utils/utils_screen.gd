@tool
extends Control
## Allows generating GDScript file that reflects QSF structure.

const HEADER = "# Auto-generated by LibMozok Utils Plugin.
# Working Dir: %s
# Main QSF: %s
# Date/Time: %s
"
const CLASS = "
class_name %s
"
const WORLD_CLASS = "
class %s:
	static var objects = [%s]
"
const ARG_TYPE = "%s_%s_%s"
const ARG_ENUM = "
	enum %s {%s}
"
const ACTION = "
	static func %s(
			data : int,
			server : LibMozokServer,%s):
		server.pushAction(
				\"%s\", 
				\"%s\", 
				[%s], 
				data)
"


func _ready() -> void:
	%OutputPath.text = ProjectSettings.get_setting("mozok/gen/output", "")
	%ClassName.text = ProjectSettings.get_setting("mozok/gen/class", "M")
	%WorkingDir.text = ProjectSettings.get_setting("mozok/gen/wdir", "")
	%QSFName.text = ProjectSettings.get_setting("mozok/gen/qsf", "")


func _on_generate_gd_script_button_pressed() -> void:
	# Read the main QSF.
	var working_dir = %WorkingDir.text
	var main_qsf_name = %QSFName.text
	var main_qsf = FileAccess.open(
			working_dir + main_qsf_name, FileAccess.READ)
	var main_qsf_text = main_qsf.get_as_text(true)
	main_qsf.close()
	
	# Init the server.
	var server = LibMozokServer.new()
	server.loadQuestScriptFile(
			working_dir, main_qsf_name, main_qsf_text, false)
	var output = FileAccess.open(%OutputPath.text, FileAccess.WRITE)
	
	var res = ""
	res += HEADER % [
			working_dir, main_qsf_name, 
			str(Time.get_datetime_string_from_system())]
	res += CLASS % %ClassName.text
	
	for worldName in server.getWorlds():
		var objects = server.getObjects(worldName)
		var obj_types : Dictionary[String, Dictionary] = {}
		var obj_ids : Dictionary[String, int] = {}
		
		# Write object list.
		var object_list = ""
		for i in objects.size():
			var objName = objects[i]
			object_list += "\n\t\t\"%s\"," % objName
			var full_type = {}
			for t in server.getObjectType(worldName, objName):
				full_type[t] = true
			obj_types[objName] = full_type
			obj_ids[objName] = i
		object_list += "\n\t\t"
		res += WORLD_CLASS % [worldName, object_list]
		
		# Write action list.
		for actionName in server.getActions(worldName):
			var actionArgs = ""
			var obj_names = ""
			var actionType = server.getActionType(worldName, actionName)
			for arg_indx in actionType.size():
				var arg_type = actionType[arg_indx] as PackedStringArray
				var arg_type_name : String
				var arg_objs = Array(objects.duplicate())
				for type_indx in arg_type.size():
					if type_indx == 0:
						var arg_name = arg_type[type_indx]
						arg_type_name = ARG_TYPE % [
								actionName, str(arg_indx + 1), arg_name]
						actionArgs += "\n\t\t\t%s : %s," % [
								arg_name, arg_type_name]
						obj_names += "\n\t\t\t\t\tobjects[%s], " % arg_name
						continue
					var atype = arg_type[type_indx]
					var f = func(o): return atype in obj_types[o].keys()
					arg_objs = arg_objs.filter(f)
				var arg_res_objs = ""
				for o in arg_objs:
					arg_res_objs += "\n\t\t%s = %s," % [o, obj_ids[o]]
				arg_res_objs += "\n\t\t"
				res += ARG_ENUM % [arg_type_name, arg_res_objs]
			actionArgs += "\n\t\t\t"
			obj_names += "\n\t\t\t\t"
			res += ACTION % [
					actionName, actionArgs, worldName, actionName, obj_names]
	
	# Store the results.
	output.store_string(res)
	output.close()
	EditorInterface.get_resource_filesystem().scan()


func _on_output_path_text_changed(new_text: String) -> void:
	ProjectSettings.set_setting("mozok/gen/output", %OutputPath.text)

func _on_class_name_text_changed(new_text: String) -> void:
	ProjectSettings.set_setting("mozok/gen/class", %ClassName.text)

func _on_working_dir_text_changed(new_text: String) -> void:
	ProjectSettings.set_setting("mozok/gen/wdir", %WorkingDir.text)

func _on_qsf_name_text_changed(new_text: String) -> void:
	ProjectSettings.set_setting("mozok/gen/qsf", %QSFName.text)
